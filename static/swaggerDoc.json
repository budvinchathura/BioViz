{
  "openapi": "3.0.0",
  "info": {
    "description": "API documentation for BioViz - Interactive Bioinformatics Alignment Algorithms Analyser and Visualizer",
    "version": "1.0.0",
    "title": "BioViz",
    "contact": {
        "name": "SEP Group 8",
        "email": "chathurae.17@cse.mrt.ac.lk"
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Pair Align - NW",
      "description": "Align a pair of sequence with NW algorithm"
    },
    {
      "name": "Pair Align - NW with affine",
      "description": "Align a pair of sequence with NW algorithm with affine gap penalties and custom similarity matrix"
    },
    {
      "name": "Pair Align - SW",
      "description": "Align a pair of sequence with SW algorithm"
    },
    {
      "name": "Pair Align - SW with affine",
      "description": "Align a pair of sequence with SW algorithm with affine gap penalties and custom similarity matrix"
    },
    {
      "name": "Progressive - MSA",
      "description": "Align multiple sequences with progressive algorithm for user defined phylogenetic tree"
    },
    {
      "name": "Progressive Optimal - MSA",
      "description": "Align multiple sequences with optimal progressive algorithm"
    }
  ],
  "paths": {
    "/pair/nw": {
      "post": {
        "tags": [
          "Pair Align - NW"
        ],
        "summary": "Returns alignment, score matrix and direction matrix",
        "requestBody": {
          "description": "Sequence data. Use only DNA/Protein sequences",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PairAlignRequestPostBody"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/PairAlignResult"
            },
            "400": {
              "description": "BAD REQUEST",
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        }
      }
    },
    "/pair/nw-affine": {
        "post": {
          "tags": [
            "Pair Align - NW with affine"
          ],
          "summary": "Returns alignment, score matrix and direction matrix",
          "requestBody": {
            "description": "Sequence data. Use only DNA/Protein sequences",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                    "oneOf":[
                        {"$ref": "#/components/schemas/PairAlignDNAExtendedRequestPostBody"},
                        {"$ref": "#/components/schemas/PairAlignProteinExtendedRequestPostBody"}
                    ]
                  
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/PairAlignResult"
              }
            },
            "400": {
              "description": "BAD REQUEST",
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        }
      },
    "/pair/sw-affine": {
    "post": {
        "tags": [
        "Pair Align - SW with affine"
        ],
        "summary": "Returns alignment, score matrix and direction matrix",
        "requestBody": {
            "description": "Sequence data. Use only DNA/Protein sequences",
            "required": true,
            "content": {
                "application/json": {
                    "schema": {
                        "oneOf":[
                            {"$ref": "#/components/schemas/PairAlignDNAExtendedRequestPostBody"},
                            {"$ref": "#/components/schemas/PairAlignProteinExtendedRequestPostBody"}
                        ]
                        
                    }
                }
            }
        },
        "produces": [
        "application/json"
        ],
        "responses": {
            "200": {
                "description": "OK",
                "schema": {
                "$ref": "#/components/schemas/PairAlignResult"
                }
            },
            "400": {
              "description": "BAD REQUEST",
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
        }
    }
    },
    "/pair/sw": {
      "post": {
        "tags": [
          "Pair Align - SW"
        ],
        "summary": "Returns alignments, score matrix and direction matrix",
        "requestBody": {
          "description": "Sequence data. Use only DNA/Protein sequences",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PairAlignRequestPostBody"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/PairAlignResult"
            }
          },
          "400": {
            "description": "BAD REQUEST",
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "/msa/progressive": {
      "post": {
        "tags": [
          "Progressive - MSA"
        ],
        "summary": "Returns final alignment, identity and phylogenetic tree",
        "requestBody": {
          "description": "Sequence data. Use only DNA/Protein sequences",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf":[
                    {"$ref": "#/components/schemas/DNA-MSAProgressiveRequestPostBody"},
                    {"$ref": "#/components/schemas/Protein-MSAProgressiveRequestPostBody"}
                ]
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/MSAResult"
            }
          },
          "400": {
            "description": "BAD REQUEST",
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "/msa/progressive-optimal": {
      "post": {
        "tags": [
          "Progressive Optimal - MSA"
        ],
        "summary": "Returns final alignment, identity and phylogenetic tree",
        "requestBody": {
          "description": "Sequence data. Use only DNA/Protein sequences",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf":[
                    {"$ref": "#/components/schemas/DNA-MSAProgressiveOptimalRequestPostBody"},
                    {"$ref": "#/components/schemas/Protein-MSAProgressiveOptimalRequestPostBody"}
                ]
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/MSAResult"
            }
          },
          "400": {
            "description": "BAD REQUEST",
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
    "Error":{
      "type":"object",
      "properties":{
        "errors":{
          "type":"array",
          "name":"List of errors",
          "items":{
            "type":"string"
          }
        }
      }
    },
      "PairAlignRequestPostBody": {
        "type": "object",
        "properties": {
          "seq_a": {
            "type": "string",
            "name":"Genome sequence 1"
            
          },
          "seq_b": {
            "type": "string",
            "name":"Genome sequence 2"
          },
          "match":{
            "type":"integer",
            "name":"Match score"
          },
          "mismatch":{
            "type":"integer",
            "name":"Mismatch penalty"
          },
          "gap":{
            "type":"integer",
            "name":"Gap penalty"
          }
        }
      },
      "PairAlignResult":{
        "type":"object",
        "properties":{
          "result":{
            "type":"object",
            "properties":{
              "alignments": {
                "type": "array",
                "items":{
                  "type":"object",
                  "properties":{
                    "algn_a":{
                      "type":"string"
                    },
                    "algn_b":{
                      "type":"string"
                    },
                    "identity":{
                      "type":"float"
                    },
                    "path":{
                      "type":"array",
                      "items":{
                        "type":"integer"
                      }
                    }
                  }

                }
                
              },
              "score": {
                "type": "integer"
              },
              "direction_matrix":{
                "type":"array",
                "items":{
                  "type": "integer"
                }                    
              },
              "score_matrix":{
                "type":"array",
                "items":{
                  "type": "integer"
                }  
              }
            }
          }
        }
      },
      "PairAlignDNAExtendedRequestPostBody": {
        "type": "object",
        "properties": {
          "seq_a": {
            "type": "string",
            "name":"DNA sequence 1"
            
          },
          "seq_b": {
            "type": "string",
            "name":"DNA sequence 2"
          },
          "match":{
            "type":"integer",
            "name":"Match score"
          },
          "mismatch":{
            "type":"integer",
            "name":"Mismatch penalty"
          },
          "opening_gap":{
            "type":"integer",
            "name":"Open penalty"
          },
          "extending_gap":{
            "type":"integer",
            "name":"Extend penalty"
          },
          "priority":{
              "type":"string",
              "name":"Priority for traceback",
              "enum": ["HIGHROAD", "LOWROAD"]
          },
          "seq_type":{
              "type":"string",
              "name":"Genome sequence type",
              "enum": ["DNA"]
          },
          "sub_mat":{
              "type":"object",
              "properties":{
                  "AA":{
                      "type":"integer"
                  },
                  "CC":{
                    "type":"integer"
                  },
                  "GG":{
                    "type":"integer"
                  },
                  "TT":{
                    "type":"integer"
                  },
                  "CA":{
                    "type":"integer"
                  },
                  "GA":{
                    "type":"integer"
                  },
                  "TA":{
                    "type":"integer"
                  },
                  "GC":{
                    "type":"integer"
                  },
                  "TC":{
                    "type":"integer"
                  },
                  "TG":{
                    "type":"integer"
                  }
              }
          }
        }
      },
      "PairAlignProteinExtendedRequestPostBody": {
        "type": "object",
        "properties": {
          "seq_a": {
            "type": "string",
            "name":"Protein sequence 1"
            
          },
          "seq_b": {
            "type": "string",
            "name":"Protein sequence 2"
          },
          "match":{
            "type":"integer",
            "name":"Match score"
          },
          "mismatch":{
            "type":"integer",
            "name":"Mismatch penalty"
          },
          "opening_gap":{
            "type":"integer",
            "name":"Open penalty"
          },
          "extending_gap":{
            "type":"integer",
            "name":"Extend penalty"
          },
          "priority":{
              "type":"string",
              "name":"Priority for traceback",
              "enum": ["HIGHROAD", "LOWROAD"]
          },
          "seq_type":{
              "type":"string",
              "name":"Genome sequence type",
              "enum": ["PROTEIN"]
          },
          "sub_mat":{
              "type":"string",
              "name" : "Substitution matrix name",
              "enum": ["DEFAULT","BLOSUM30","BLOSUM45","BLOSUM50","BLOSUM90","BLOSUM90"]
          }
        }
      },
      "DNA-MSAProgressiveRequestPostBody": {
        "type": "object",
        "properties": {
          "sequences": {
            "type":"array",
            "name":"DNA sequences",
            "items":{
              "type": "string"
            }
          },
          "order": {
            "type":"array",
            "name":"Order of compairing of pairs",
            "items":{
              "type": "array",
              "maxItems": 2,
              "minItems": 2,
              "items":{
                  "type":"integer"
              }
            }
          },
          "match":{
            "type":"integer",
            "name":"Match score"
          },
          "mismatch":{
            "type":"integer",
            "name":"Mismatch penalty"
          },
          "gap":{
            "type":"integer",
            "name":"Gap penalty"
          },
          "seq_type":{
            "type":"string",
            "name":"Genome sequence type",
            "enum": ["DNA"]
          },
          "sub_mat":{
            "type":"object",
            "properties":{
                "AA":{
                    "type":"integer"
                },
                "CC":{
                  "type":"integer"
                },
                "GG":{
                  "type":"integer"
                },
                "TT":{
                  "type":"integer"
                },
                "CA":{
                  "type":"integer"
                },
                "GA":{
                  "type":"integer"
                },
                "TA":{
                  "type":"integer"
                },
                "GC":{
                  "type":"integer"
                },
                "TC":{
                  "type":"integer"
                },
                "TG":{
                  "type":"integer"
                }
            }
          }
        }
      },
      "Protein-MSAProgressiveRequestPostBody": {
        "type": "object",
        "properties": {
          "sequences": {
            "type":"array",
            "name":"DNA sequences",
            "items":{
              "type": "string"
            }
          },
          "order": {
            "type":"array",
            "name":"Order of compairing of pairs",
            "items":{
              "type": "array",
              "maxItems": 2,
              "minItems": 2,
              "items":{
                  "type":"integer"
              }
            }
          },
          "match":{
            "type":"integer",
            "name":"Match score"
          },
          "mismatch":{
            "type":"integer",
            "name":"Mismatch penalty"
          },
          "gap":{
            "type":"integer",
            "name":"Gap penalty"
          },
          "seq_type":{
            "type":"string",
            "name":"Genome sequence type",
            "enum": ["PROTEIN"]
          },
          "sub_mat":{
            "type":"string",
            "name" : "Substitution matrix name",
            "enum": ["DEFAULT","BLOSUM30","BLOSUM45","BLOSUM50","BLOSUM90","BLOSUM90"]
          }
        }
      },
      "DNA-MSAProgressiveOptimalRequestPostBody": {
        "type": "object",
        "properties": {
          "sequences": {
            "type":"array",
            "name":"DNA sequences",
            "items":{
              "type": "string"
            }
          },
          "match":{
            "type":"integer",
            "name":"Match score"
          },
          "mismatch":{
            "type":"integer",
            "name":"Mismatch penalty"
          },
          "gap":{
            "type":"integer",
            "name":"Gap penalty"
          },
          "seq_type":{
            "type":"string",
            "name":"Genome sequence type",
            "enum": ["DNA"]
          },
          "sub_mat":{
            "type":"object",
            "properties":{
                "AA":{
                    "type":"integer"
                },
                "CC":{
                  "type":"integer"
                },
                "GG":{
                  "type":"integer"
                },
                "TT":{
                  "type":"integer"
                },
                "CA":{
                  "type":"integer"
                },
                "GA":{
                  "type":"integer"
                },
                "TA":{
                  "type":"integer"
                },
                "GC":{
                  "type":"integer"
                },
                "TC":{
                  "type":"integer"
                },
                "TG":{
                  "type":"integer"
                }
            }
          }
        }
      },
      "Protein-MSAProgressiveOptimalRequestPostBody": {
        "type": "object",
        "properties": {
          "sequences": {
            "type":"array",
            "name":"DNA sequences",
            "items":{
              "type": "string"
            }
          },
          "match":{
            "type":"integer",
            "name":"Match score"
          },
          "mismatch":{
            "type":"integer",
            "name":"Mismatch penalty"
          },
          "gap":{
            "type":"integer",
            "name":"Gap penalty"
          },
          "seq_type":{
            "type":"string",
            "name":"Genome sequence type",
            "enum": ["PROTEIN"]
          },
          "sub_mat":{
            "type":"string",
            "name" : "Substitution matrix name",
            "enum": ["DEFAULT","BLOSUM30","BLOSUM45","BLOSUM50","BLOSUM90","BLOSUM90"]
        }
        }
      },
      "MSAResult":{
          "type":"object",
          "properties":{
              "result":{
                  "type":"object",
                  "properties":{
                      "alignments":{
                        "type":"array",
                        "name":"final alignment",
                        "items":{
                          "type": "string"
                        }
                      },
                      "graph":{
                          "type":"object",
                          "name":"data for phylogenetic tree"
                      },
                      "identity":{
                          "type":"float",
                          "name":"identity factor"
                      },
                      "profiles":{
                          "type":"object",
                          "name":"intermediated profiles in phylogenetic tree"
                      }
                  }
              }
          }
      }
    }
  }
}